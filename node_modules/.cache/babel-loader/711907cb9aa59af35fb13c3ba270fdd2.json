{"ast":null,"code":"// * Redux Saga is a middleware library used to allow Redux store\n// * to interact with resources outside itself asynchronously\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { firestore, convertRentalsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchRentalsFailure, fetchRentalsSuccess } from \"./rental.actions\";\nimport RentalActionTypes from \"./rental.types\"; // * function* = Generator function\n\nexport function* fetchRentalsAsync() {\n  // * put it insde \"try catch\" to catch the error if the fetch fails\n  try {\n    // * reference to collection\n    const rentalRef = firestore.collection(\"rentals\"); // * yield .get() get's back at the const value that we set it\n    // * no .then() required\n\n    const snapshot = yield rentalRef.get(); // * call() = takes as it's 1st argument the function/method\n    // *                    the 2nd arguments are the parameters passed into the ()\n    // * = convertRentalsSnapshotToMap(snapshot)\n\n    const rentalsMap = yield call(convertRentalsSnapshotToMap, snapshot); // * put() = dispatch() in Redux Saga, has to be yielded\n\n    yield put(fetchRentalsSuccess(rentalsMap));\n  } catch (error) {\n    yield put(fetchRentalsFailure(error.message));\n  }\n} // * generator () calling another generator () insde it\n\nexport function* fetchRentalsStart() {\n  yield takeLatest(RentalActionTypes.FETCH_RENTALS_START, fetchRentalsAsync);\n}\nexport function* rentalSagas() {\n  yield all([call(fetchRentalsStart)]);\n}","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/ClubRossignolNew/client/src/redux/rental/rental.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertRentalsSnapshotToMap","fetchRentalsFailure","fetchRentalsSuccess","RentalActionTypes","fetchRentalsAsync","rentalRef","collection","snapshot","get","rentalsMap","error","message","fetchRentalsStart","FETCH_RENTALS_START","rentalSagas"],"mappings":"AAAA;AACA;AAEA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SACEC,SADF,EAEEC,2BAFF,QAGO,+BAHP;AAKA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,kBAAzD;AACA,OAAOC,iBAAP,MAA8B,gBAA9B,C,CAEA;;AACA,OAAO,UAAUC,iBAAV,GAA8B;AACnC;AACA,MAAI;AACF;AACA,UAAMC,SAAS,GAAGN,SAAS,CAACO,UAAV,CAAqB,SAArB,CAAlB,CAFE,CAIF;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,SAAS,CAACG,GAAV,EAAvB,CANE,CAQF;AACA;AACA;;AACA,UAAMC,UAAU,GAAG,MAAMb,IAAI,CAACI,2BAAD,EAA8BO,QAA9B,CAA7B,CAXE,CAaF;;AACA,UAAMV,GAAG,CAACK,mBAAmB,CAACO,UAAD,CAApB,CAAT;AACD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACI,mBAAmB,CAACS,KAAK,CAACC,OAAP,CAApB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,iBAAV,GAA8B;AACnC,QAAMjB,UAAU,CAACQ,iBAAiB,CAACU,mBAAnB,EAAwCT,iBAAxC,CAAhB;AACD;AAED,OAAO,UAAUU,WAAV,GAAwB;AAC7B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,iBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["// * Redux Saga is a middleware library used to allow Redux store\n// * to interact with resources outside itself asynchronously\n\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\n\nimport {\n  firestore,\n  convertRentalsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nimport { fetchRentalsFailure, fetchRentalsSuccess } from \"./rental.actions\";\nimport RentalActionTypes from \"./rental.types\";\n\n// * function* = Generator function\nexport function* fetchRentalsAsync() {\n  // * put it insde \"try catch\" to catch the error if the fetch fails\n  try {\n    // * reference to collection\n    const rentalRef = firestore.collection(\"rentals\");\n\n    // * yield .get() get's back at the const value that we set it\n    // * no .then() required\n    const snapshot = yield rentalRef.get();\n\n    // * call() = takes as it's 1st argument the function/method\n    // *                    the 2nd arguments are the parameters passed into the ()\n    // * = convertRentalsSnapshotToMap(snapshot)\n    const rentalsMap = yield call(convertRentalsSnapshotToMap, snapshot);\n\n    // * put() = dispatch() in Redux Saga, has to be yielded\n    yield put(fetchRentalsSuccess(rentalsMap));\n  } catch (error) {\n    yield put(fetchRentalsFailure(error.message));\n  }\n}\n\n// * generator () calling another generator () insde it\nexport function* fetchRentalsStart() {\n  yield takeLatest(RentalActionTypes.FETCH_RENTALS_START, fetchRentalsAsync);\n}\n\nexport function* rentalSagas() {\n  yield all([call(fetchRentalsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}